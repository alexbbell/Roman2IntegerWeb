{"version":3,"sources":["Components/RomanConverter.js","App.js","reportWebVitals.js","index.js"],"names":["TheRomanConvert","props","_useState","useState","_useState2","Object","slicedToArray","romanString","setRomanString","_useState3","_useState4","arabianString","setArabianString","_useState5","_useState6","errorMsg","setErrorMsg","mainUrl","ConfigData","externals","RomanToArabian","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","string2convert","wrap","_context","prev","next","axios","post","then","response","data","catch","error","setTimeout","stop","_x","apply","this","arguments","sendRequest","react_default","a","createElement","Fragment","Grid","container","spacing","item","xs","md","className","TextField","id","required","onChange","event","str","replace","foolDefender","target","value","toUpperCase","onKeyPress","ev","key","preventDefault","label","variant","inputProps","style","fontSize","Button","onClick","App","ms","RomanConverter","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.83adbef6.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\r\n\r\nimport { Button, Grid, TextField } from '@mui/material';\r\nimport ReactDOM from 'react-dom/client';\r\nimport axios from 'axios';\r\nimport ConfigData from '../Config/ConfigData.json';\r\n\r\n\r\nconst TheRomanConvert = (props) => {\r\n    const [romanString, setRomanString] = useState('');\r\n    const [arabianString, setArabianString] = useState('');\r\n    const [errorMsg, setErrorMsg]=  useState();\r\n    const mainUrl = ConfigData.externals.mainUrl;\r\n\r\n\r\n    \r\n    const RomanToArabian = async (string2convert) => {\r\n        axios.post(mainUrl + '?income=' + string2convert)\r\n        .then(function(response) {\r\n            let data = response.data;\r\n            setArabianString(data);\r\n        })\r\n        .catch(function(error) {\r\n            setErrorMsg(error.response.data);\r\n\r\n            setTimeout(() => {\r\n                setErrorMsg(null);\r\n              }, 3000);\r\n        });\r\n       \r\n    }\r\n\r\n    const foolDefender = (str) => {\r\n        if(str != null && typeof str != 'undefined' ) {\r\n            str = str.replace(\"IIII\", \"IV\").replace(\"VV\", \"X\").replace(\"XXXX\", \"XL\").replace(\"LL\", \"C\").replace(\"IVI\", \"V\").\r\n            replace(\"IIV\", \"IV\").replace(\"IIX\", \"IX\");\r\n        }\r\n        return str;\r\n    }\r\n\r\n    const changeRomanString = (event) => {\r\n        setArabianString('');\r\n        let str =   foolDefender(event.target.value.toUpperCase()); \r\n        setRomanString(str);\r\n    }\r\n\r\n    const sendRequest = () => {\r\n        RomanToArabian(romanString);\r\n    }\r\n    const romanKeyPress = (e) => {\r\n           sendRequest();\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container spacing={2}>\r\n\r\n            <Grid item xs={1} md={1} ></Grid>\r\n                <Grid item xs={5}  md={3} >\r\n                    <div className='roman'>\r\n\r\n                        <div className='mdl'>\r\n                            <TextField id=\"romanString\" required onChange={changeRomanString} value={romanString}  \r\n                                onKeyPress={(ev) => {\r\n                                    if (ev.key === 'Enter') {\r\n                                        ev.preventDefault();\r\n                                        romanKeyPress();\r\n                                    }\r\n                                }} label=\"Enter a roman number\" variant=\"outlined\" inputProps={{style: {fontSize: 40}}} />\r\n\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n\r\n                \r\n                <Grid item xs={1} md={1} >\r\n                    <div className='wrap'>\r\n                <div className='mdl'>\r\n                    <Button variant=\"contained\" onClick={sendRequest} >Convert</Button></div></div>\r\n                </Grid>\r\n                \r\n                <Grid item xs={5} md={3}  >\r\n                    <div className='arabian'>\r\n                        <div className='mdl'>\r\n\r\n                            <TextField id=\"filled-basic\"  label=\"Integer Result\" variant=\"filled\" \r\n                             value={arabianString} \r\n                           \r\n                            inputProps={{style: {fontSize: 40}}}/>\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid item xs={1} md={3}></Grid>\r\n                <Grid item xs={9} md={9}>\r\n                    <div className='err'>{errorMsg}</div>\r\n                </Grid>\r\n\r\n\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default TheRomanConvert;\r\n","import React, { Component, useEffect, useState } from 'react'\nimport './App.css';\nimport { Button, Grid, TextField } from '@mui/material';\nimport TheRomanConvert from './Components/RomanConverter';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Grid container spacing={2}>\n\n        <Grid item xs={3} ms={3}></Grid>\n        <Grid item xs={7} ms={7}>\n          <h1>Roman to Integer Converter</h1>\n          <span>\n            There are six instances where we required subtraction:\n            <ul>\n              <li key=\"l1\">I can be placed before V (5) and X to make 4 and 9.</li>\n              <li key=\"l2\">X can be placed before L (50) and C to make 40 and 90.</li>\n              <li key=\"l3\">C can be placed before D (500) and M to make 400 and 900.</li>\n            </ul>\n          </span>\n\n\n        </Grid>\n        <Grid item xs={2} ms={2}></Grid>\n      </Grid>\n      <header className=\"App-header\">\n        \n        <TheRomanConvert />\n\n        <Grid container spacing={2}>\n          <Grid item xs={2} ms={2}></Grid>\n          <Grid item xs={2} ms={2}>\n            <ul>\n              <li key=\"lnk1\"><a href=\"https://github.com/alexbbell/Roman2Integer\">https://github.com/alexbbell/Roman2Integer</a></li>\n              <li key=\"lnk2\"><a href=\"https://github.com/alexbbell/Roman2IntegerWeb\">https://github.com/alexbbell/Roman2IntegerWeb</a></li>\n\n            </ul>\n          </Grid>\n        </Grid>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}